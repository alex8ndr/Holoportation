// Compute shader for processing the point cloud data
#pragma kernel CSMain

// Buffers to store point cloud data
RWStructuredBuffer<float3> _PointCloudBuffer; // Position
RWStructuredBuffer<float3> _ColorBuffer; // Color

// Camera position (for any transformation logic)
float3 _CameraPosition;

[numthreads(64, 1, 1)] // Process in batches of 64 points at a time
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _PointCloudBuffer.Length)
        return;

    // Retrieve the position and color for the current point
    float3 pos = _PointCloudBuffer[id.x];
    float3 col = _ColorBuffer[id.x];

    // Simple transformation or any other logic can go here
    // (e.g., transforming points, applying camera-related logic)

    // Optionally, apply some effect based on position or camera distance
    float distanceToCamera = length(_CameraPosition - pos);
    col *= saturate(1.0f - distanceToCamera * 0.05f); // Simple fading effect by distance

    // Write the transformed data back to the buffers
    _PointCloudBuffer[id.x] = pos;
    _ColorBuffer[id.x] = col;
}